<div class="container-fluid" x-data="reviewData">
  <div class="row mt-4">

    <div class="col col-xl-8">
      <p class="h1">Your reviews</p>
    </div>

    <%= if @current_user do %>
      <div class="col col-auto">
        <%= link "New Review", to: Routes.review_path(@conn, :new), class: "btn btn-primary" %>
      </div>

      <div class="col col-auto">
        <button class="btn btn-primary" id="refreshReviews" @click="refresh()">Refresh reviews</button>
      </div>
    <%end%>
  </div>


  <div class="row">
    <%= if @current_user do %>
      <div class="col col-md-12">
        <table class="table table-hover mt-3">
          <thead>
            <tr>
              <th>Product photo</th>
              <th>Title</th>
              <th>Body</th>
              <th>Upvotes</th>
              <th>Downvotes <small>(not publicly shown)</small></th>
              <!-- <th>Ipfs hash</th> -->

              <th></th>
            </tr>
          </thead>
          <tbody>

          <template x-for="review in reviews">
            <tr>
              <td x-text="review.product_id"></td>
              <td x-text="review.title"></td>
              <td x-text="review.body"></td>
              <td x-text="review.upvotes"></td>
              <td x-text="review.downvotes"></td>
            </tr>
          </template>
          </tbody>
        </table>
      </div>
    <% else %>
      <div class="col col-md-12">
        <p class="h3">You need to be logged in to see your reviews</p>
      </div>
    <% end %>
  </div>

</div>


<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('reviewData', () => ({
            reviews: [ ],

            async refresh() {
              if (!window.contract) {
                await ethEnabled();
              }

              const reviewHashes = await contract.methods.getReviews().call();
              //console.log(reviewHashes)

              this.reviews = []

              for (i = 2; i < reviewHashes.length; i++) {

                //console.log(reviewHashes[i])
                const asciiAddress = web3.utils.hexToAscii(reviewHashes[i])
                //console.log(asciiAddress)
                const stream = await ipfs.cat(asciiAddress);

                const decoder = new TextDecoder()
                let data = ''

                for await (const chunk of stream) {
                  // chunks of data are returned as a Uint8Array, convert it back to a string
                  data += decoder.decode(chunk, { stream: true })
                }

                const json_data = JSON.parse(data);

                this.reviews.push({
                  product_id: json_data.productNumber,
                  title: json_data.reviewTitle,
                  body: json_data.reviewBody,
                  upvotes: 1,
                  downvotes: 0,
                });
              }
            }
        }))
    })
</script>

<script>
  window.addEventListener('load', function(){
    document.getElementById("refreshReviews").click();
  });
</script>
