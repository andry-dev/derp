<div class="container-fluid" x-data="productListData">
  <div class="row mt-4">

    <div class="col col-sm-8">
      <p class="h1">Browse Products</p>
    </div>
  </div>

  <div class="row">
      <div class="col col-md-12">
        <table class="table table-hover mt-3">
          <thead>
            <tr>
              <th>Product name</th>
              <!-- <th>Purchase date</th> -->
              <th>Product store</th>
              <th>Local product ID</th>
              <th>Link to product</th>
            </tr>
          </thead>
          <tbody>
            <template x-for="p in products">
              <tr>
                <td><a :href="`/products/${p.id}`" x-text="p.name"></a></td>
                <td x-text="p.storeId"></td>
                <td x-text="p.localId"></td>
                <td><a :href="p.url">Store link</a></td>
              </tr>
            </template>
          </tbody>
        </table>
      </div>
  </div>
</div>


<script>
document.addEventListener('alpine:init', () => {
  Alpine.data('productListData', () => ({
    products: [],

    async init() {
      await ethEnabled();

      const products = await contract.methods.getProducts().call();

      for (let i = 0; i < products.length; ++i) {
        const product = products[i];
        const storeId = BigInt(product) >> 32n;
        const localId = BigInt(product) & 0xFFFFFFFFn;

        const respJson = await queryProductInfo(storeId, localId);
        this.products.push({
          id: product,
          name: respJson.name || '<Unknown>',
          localId: localId,
          storeId: storeId,
          url: respJson.url,
        })
      }
    },


  }));
});
</script>
