<div class="container-fluid py-5" x-data="itemData" :style="currentlySelectedBackground">
    <div class="row d-flex align-items-center h-100">
        <div class="col col-lg-12 mb-4 mb-lg-0">
        <div class="card mb-3" style="border-radius: .5rem;">
            <div class="row g-0">
                <div class="col col-sm-12 mt-5">
                    <p class="text-center h2"> Welcome to <%=@current_user.username %>'s profile </p>
                </div>
            </div>
            <div class="row g-0">
                <div class="col col-sm-12">
                    <img id="banner" x-bind:src="currentlySelectedBanner"
                    alt="banner" class="img-fluid my-5" style="width: 100%;" />
                </div>
            </div>
            <div class="row g-0">
                <div class="col-md-4 gradient-custom text-center"
                    style="border-top-left-radius: .5rem; border-bottom-left-radius: .5rem; border-bottom-right-radius: .5rem; border-top-right-radius: .5rem;">
                    <img id="avatar" x-bind:src="currentlySelectedPropic"
                    alt="Avatar" class="img-fluid my-5" style="width: 80px;" />
                    <h5> <%= @user.username %> </h5>
                    <p>ETH token enthusiast </p>

                    <!-- Button trigger modal -->
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#tempAddModal">
                        Customize profile
                    </button>

                </div>
                <div class="col-md-8">
                    <div class="card-body p-4">
                    <h6>Information</h6>
                    <hr class="mt-0 mb-4">
                    <div class="row pt-1">
                        <div class="col-6 mb-3">
                        <h6>Email</h6>
                            <%= @user.email %>
                        </div>
                        <div class="col-6 mb-3">
                        <h6>Phone</h6>
                        <p class="text-muted">123 456 789</p>
                        </div>
                    </div>
                    <h6>Reviews</h6>
                    <hr class="mt-0 mb-4">
                    <div class="row pt-1">
                        <div class="col-6 mb-3">
                        <h6>Recent</h6>
                        <p class="text-muted">Lorem ipsum</p>
                        </div>
                        <div class="col-6 mb-3">
                        <h6>Most Upvoted</h6>
                        <p class="text-muted">Dolor sit amet</p>
                        </div>
                    </div>
                    </div>
                </div>
            </div>
        </div>
        </div>
    </div>

    <div class="modal" tabindex="-1" id="tempAddModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Select NFTs to customise profile</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <.form class="form" for={@changeset} action={Routes.profile_path(@conn, :update)}>
                        <div class="mb-3">

                            <p> Use the right name to select the aspect you wish to apply </p>

                            <select id="custom_propic" name="user[custom_propic]" class="form-select mt-4" aria-label="Default select example">
                                <template x-for="item in itemsPropic">
                                    <option x-text="item.name" :value="item.asciiAddress"></option>
                                </template>
                            </select>

                            <select name="user[custom_banner]" class="form-select mt-4" aria-label="Default select example">
                                <template x-for="item in itemsBanner">
                                    <option x-text="item.name" :value="item.asciiAddress"></option>
                                </template>
                            </select>

                            <select name="user[custom_bg_color]" class="form-select mt-4" aria-label="Default select example">
                                <template x-for="item in itemsBackground">
                                    <option x-text="item.name" :value="item.asciiAddress"></option>
                                </template>
                            </select>

                        </div>

                        <button type="submit" class="btn btn-primary">Submit</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </.form>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('itemData', () => ({
            itemsPropic: [ ],
            itemsBanner: [ ],
            itemsBackground : [ ],
            currentlySelectedPropic: "",
            currentlySelectedBanner: "",
            currentlySelectedBackground: "",

            async init() {

                let propic_url;
                let banner_url;
                let background_url;
                propic_url = "https://picsum.photos/id/101/200/300";
                banner_url = "https://picsum.photos/id/100/1200/300";
                background_url = "https://picsum.photos/id/100/1200/300";
                this.currentlySelectedPropic = propic_url;
                this.currentlySelectedBanner = banner_url;
                this.currentlySelectedBackground = "background-image: url(" + background_url + ");";

                if (!window.contract) {
                    await ethEnabled();
                }


                const itemHashes = await contract.methods.getUserProfileItems().call();

                for (i = 0; i < itemHashes.length; i++) {

                    const asciiAddress = web3.utils.hexToAscii(itemHashes[i])
                    //console.log(asciiAddress)
                    const stream = await ipfs.cat(asciiAddress);

                    const decoder = new TextDecoder()
                    let data = ''

                    for await (const chunk of stream) {
                        // chunks of data are returned as a Uint8Array, convert it back to a string
                        data += decoder.decode(chunk, { stream: true })
                    }

                    const json_data = JSON.parse(data);

                    if(json_data.type == "BG"){
                        this.itemsBackground.push({
                            name: json_data.name,
                            asciiAddress: asciiAddress,
                            url: json_data.url
                        })
                    }
                    else if (json_data.type == "PI"){
                        this.itemsPropic.push({
                            name: json_data.name,
                            asciiAddress: asciiAddress,
                            url: json_data.url
                        });
                    } else {
                        this.itemsBanner.push({
                            name: json_data.name,
                            asciiAddress: asciiAddress,
                            url: json_data.url
                        });
                    }

                }


                <%= if @user.custom_propic do %>

                try {
                    propic_url = (this.itemsPropic.find(e => e.asciiAddress == "<%= @user.custom_propic %>")).url;
                } catch (error) {
                    propic_url = "https://picsum.photos/id/101/200/300";
                }

                this.currentlySelectedPropic = propic_url;
                <% end %>

                <%= if @user.custom_banner do %>

                try {
                    banner_url = (this.itemsBanner.find(e => e.asciiAddress == "<%= @user.custom_banner %>")).url;
                } catch (error) {
                    banner_url = "https://picsum.photos/id/100/1200/300";
                }
                this.currentlySelectedBanner = banner_url;
                <% end %>


                <%= if @user.custom_bg_color do %>

                try {
                    background_url = (this.itemsBackground.find(e => e.asciiAddress == "<%= @user.custom_bg_color %>")).url;
                } catch (error) {
                    background_url = "https://picsum.photos/id/100/1200/300";
                }
                this.currentlySelectedBackground = "background-image: url(" + background_url + ");";
                <% end %>


            }
        }))
    });

</script>
