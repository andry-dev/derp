<div class="container-fluid" x-data="reviewData">
      <%= if @current_user do %>
        <!-- <div class="row mt-4"> -->
        <!---->
        <!--     <div class="col col-sm-8"> -->
        <!--       <h1>Products to be reviewed</h1> -->
        <!--     </div> -->
        <!---->
        <!--     <div class="col col-sm-4"> -->
        <!--       <button class="btn btn-primary" id="refresh" @click="refresh()">Refresh reviews</button> -->
        <!--     </div> -->
        <!-- </div> -->

        <div class="row mt-4">

            <div class="col col-sm-8">
              <h1>Reviews</h1>
            </div>

            <div class="col col-sm-4">
              <%= link "New Review", to: Routes.review_path(@conn, :new), class: "btn btn-primary" %>
              <button class="btn btn-primary" id="refreshReviews" @click="refresh()">Refresh reviews</button>
            </div>
        </div>

        <div class="row">
            <div class="col col-md-12">
              <table class="table table-hover mt-3">
                <thead>
                  <tr>
                    <th>Product photo</th>
                    <th>Title</th>
                    <th>Body</th>
                    <th>Upvotes</th>
                    <th>Downvotes <small>(not publicly shown)</small></th>
                    <!-- <th>Ipfs hash</th> -->

                    <th></th>
                  </tr>
                </thead>
                <tbody>

                <template x-for="review in reviews">
                  <tr>
                    <td x-text="review.product_id"></td>
                    <td x-text="review.title"></td>
                    <td x-text="review.body"></td>
                    <td x-text="review.upvotes"></td>
                    <td x-text="review.downvotes"></td>
                  </tr>
                </template>
                </tbody>
              </table>
            </div>
        </div>
          <div class="row mt-4 align-items-center">
            <div class="col col-sm-8">
              <h3>Products to review</h3>
              <p>You still have to review the following products:</p>
            </div>

            <div class="col col-sm-2">
              <button class="btn btn-danger" id="requestReviewTokens" @click="requestReviewTokens()">Refresh products</button>
            </div>
            <div class="col col-sm-2">
              <p x-show="refreshAlreadyRequested">Free daily refresh already requested! You will pay the next ones.</p>
              <p x-show="noNewProducts">No new products!</p>
            </div>
          </div>
          <div class="row mt-4">
            <div class="col col-md-12">
              <table class="table table-hover mt-3">
                    <thead>
                      <tr>
                        <th>Store ID</th>
                        <th>Local Product ID</th>
                        <th>Name</th>
                        <th>URL</th>
                      </tr>
                    </thead>
                    <tbody>

                    <template x-for="p in productsToReview">
                      <tr>
                        <td x-text="p.store"></td>
                        <td x-text="p.localId"></td>
                        <td x-text="p.name"></td>
                        <td><a :href="p.url" x-text="p.url"></a></td>
                      </tr>
                    </template>
                    </tbody>
              </table>
            </div>
          </div>
      <% else %>
        <div class="row mt-4">
            <div class="col col-md-12">
              <p class="text-center">Please log in to see reviews</p>
            </div>
        </div>
      <% end %>
</div>


<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('reviewData', () => ({
            reviews: [ ],
            productsToReview: [],
            refreshAlreadyRequested: false,
            noNewProducts: false,

            async init() {
              await ethEnabled();
              await this.refresh();
              await this.refreshProducts();
            },

            async refreshProducts() {
              const products = await contract.methods.getProductsToBeReviewed().call();

              for (let i = 0; i < products.length; ++i) {
                const storeId = BigInt(products[i]) >> 32n;
                const localId = BigInt(products[i]) & 0xFFFFFFFFn;

                const productInfo = await queryProductInfo(storeId, localId);

                this.productsToReview.push({
                  store: storeId,
                  localId: localId,
                  name: productInfo.name || "<Unknown>",
                  url: productInfo.url || "",
                });
              }
            },

            async refresh() {

              const reviewHashes = await contract.methods.getReviews().call();
              //console.log(reviewHashes)

              this.reviews.length = 0;
              for (i = 0; i < reviewHashes.length; i++) {

                //console.log(reviewHashes[i])
                const asciiAddress = web3.utils.hexToAscii(reviewHashes[i])
                //console.log(asciiAddress)
                const stream = await ipfs.cat(asciiAddress);

                const decoder = new TextDecoder()
                let data = ''

                for await (const chunk of stream) {
                  // chunks of data are returned as a Uint8Array, convert it back to a string
                  data += decoder.decode(chunk, { stream: true })
                }

                const json_data = JSON.parse(data);

                this.reviews.push({
                  product_id: json_data.productNumber,
                  title: json_data.reviewTitle,
                  body: json_data.reviewBody,
                  upvotes: 1,
                });
              }
            },

            async requestReviewTokens() {
              const response = await fetch('http://localhost:4000/api/review_token_request', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  address: (await web3.eth.getAccounts())[0],
                  products: []
                })
              });

              const responseData = (await response.json()).data;
              console.log(responseData);

              if (!responseData.result && responseData.code == 0) {
                console.log(responseData.reason);
                this.refreshAlreadyRequested = true;
                this.noNewProducts = false;

                contract.methods.requestAllReviewTokens().send({
                from: (await web3.eth.getAccounts())[0]
                });
              } else if (!responseData.result && responseData.code == 1) {
                // No new products
                this.noNewProducts = true;
              } else {
                this.refreshAlreadyRequested = true;
                this.noNewProducts = false;
              }
            }
        }))
    })
</script>
