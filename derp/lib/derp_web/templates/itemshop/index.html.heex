<div class="container-fluid" x-data="itemData">

    <div class="row">
        <div class="col-sm-4">
            <h1 class="text-center">Buyable Items</h1>
        </div>

        <div class="col col-sm-4 mt-2">
            <button class="btn btn-primary" id="refreshItems" @click="refresh()">Refresh items </button>
        </div>

        <!-- Button trigger modal -->
        <div class="col col-sm-4 mt-2">
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#tempAddModal">
                temp add modal
            </button>
        </div>

    </div>

    <div class="row mt-2">
        <template x-for="item in items">
            <div class="col-sm-4">
                <div class="card mb-4">
                    <div class="card-body h-50">
                        <img class="card-img-top" x-bind:src="item.aspect" alt="Card image cap">
                        <h5 class="card-title" x-text="item.name"></h5>
                        <p class="card-text" x-text="item.desc"></p>
                        <p class="card-text" x-text="item.price"></p>

                        <form class="form" x-data="buyForm()" @submit.prevent="submitForm">

                            <!--hardcoded for now-->
                            <input type="hidden" x-model.number="formData.profileItemId" value="1"/>

                            <button class="btn btn-primary">
                                Buy
                            </button>

                        </form>

                    </div>
                </div>
            </div>
        </template>
    </div>

    <div class="modal" tabindex="-1" id="tempAddModal">
        <div class="modal-dialog">
            <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add item</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form class="form" x-data="addForm()" @submit.prevent="submitForm">
                    <div class="mb-3">
                        <label for="itemName" class="form-label">Item name</label>
                        <input type="text" class="form-control" id="itemName" x-model="formData.name" aria-describedby="itemName">
                    </div>
                    <div class="mb-3">
                        <label for="itemDesc" class="form-label">Item description</label>
                        <input type="text" class="form-control" id="itemDesc" x-model="formData.desc" aria-describedby="itemDesc">
                    </div>
                    <div class="mb-3">
                        <label for="itemPrice" class="form-label">Item price</label>
                        <input type="text" class="form-control" id="itemPrice" x-model="formData.price" aria-describedby="itemPrice">
                    </div>
                    <div class="mb-3">
                        <label for="itemAspect" class="form-label">Item aspect</label>
                        <input type="text" class="form-control" id="itemAspect" x-model="formData.url" aria-describedby="itemAspect">
                    </div>

                    <button type="submit" class="btn btn-primary">Submit</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </form>
            </div>
            </div>
        </div>
    </div>


</div>



<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('itemData', () => ({
            items: [ ],

            async refresh() {
                if (!window.contract) {
                    await ethEnabled();
                }

                const itemHashes = await contract.methods.getBuyableProfileItems().call();

                this.items = [];

                for (i = 0; i < itemHashes.length; i++) {

                    const asciiAddress = web3.utils.hexToAscii(itemHashes[i])
                    //console.log(asciiAddress)
                    const stream = await ipfs.cat(asciiAddress);

                    const decoder = new TextDecoder()
                    let data = ''

                    for await (const chunk of stream) {
                        // chunks of data are returned as a Uint8Array, convert it back to a string
                        data += decoder.decode(chunk, { stream: true })
                    }

                    const json_data = JSON.parse(data);

                    this.items.push({
                        item_id: 1,
                        name: json_data.name,
                        desc: json_data.desc,
                        price: json_data.price,
                        aspect: json_data.url,
                    });

                }

                this.items.push({
                    id: 1,
                    name: "RED",
                    desc: "RED",
                    price: 1,
                    aspect: "https://picsum.photos/500/500",
                });

                this.items.push({
                    id: 1,
                    name: "RED",
                    desc: "RED",
                    price: 1,
                    aspect: "https://picsum.photos/500/500",
                });

                this.items.push({
                    id: 1,
                    name: "RED",
                    desc: "RED",
                    price: 1,
                    aspect: "https://picsum.photos/500/500",
                });

            }
        }))
    });
</script>

<script>
  window.addEventListener('load', function(){
    document.getElementById("refreshItems").click();
  });
</script>

<script>
    function buyForm() {
        return {
            formData: {
                profileItemId: 1,
            },
            async submitForm() {
                console.log(this.formData.profileItemId)
                console.log("yaay");
            }
        }
    }
</script>

<script>
    function addForm() {
        return {
            formData: {
                name: "",
                desc: "",
                price: "",
                url: ""
            },
            async submitForm() {
                const response = await ipfs.add(JSON.stringify(this.formData));
                const itemHash = response.path;

                if (!window.contract) {
                    await ethEnabled();
                }

                //grab CID hash and convert to bytes32
                const bytes32ItemHash = web3.utils.fromAscii(itemHash);
                await window.contract.methods.addProfileItem(bytes32ItemHash, this.formData.price).send();

                window.location.href="/itemshop"

            }
        }
    }
</script>
