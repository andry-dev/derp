<div class="container-fluid" x-data="reviewData">

  <ul class="nav nav-tabs" id="myTab" role="tablist">

    <%= if @current_user do %>
      <li class="nav-item" role="presentation">
        <button class="nav-link active" id="home-tab" data-bs-toggle="tab" data-bs-target="#home" type="button" role="tab" aria-controls="home" aria-selected="true">Your reviews</button>
      </li>
      <li class="nav-item" role="presentation">
        <button class="nav-link" id="profile-tab" data-bs-toggle="tab" data-bs-target="#profile" type="button" role="tab" aria-controls="profile" aria-selected="false">Explore</button>
      </li>
    <%else %>
      <li class="nav-item" role="presentation">
        <button class="nav-link active" id="profile-tab" data-bs-toggle="tab" data-bs-target="#profile" type="button" role="tab" aria-controls="profile" aria-selected="false">Explore</button>
      </li>
    <%end %>
  </ul>

  <div class="tab-content" id="myTabContent">

    <%= if @current_user do %>
      <div class="tab-pane fade show active" id="home" role="tabpanel" aria-labelledby="home-tab">

        <div class="row mt-4">

            <div class="col col-auto">
              <%= link "New Review", to: Routes.review_path(@conn, :new), class: "btn btn-primary" %>
            </div>

            <div class="col col-auto">
              <button class="btn btn-primary" id="refreshReviews" @click="refresh()">Refresh reviews</button>
            </div>
        </div>

        <div class="row">
          <%= if @current_user do %>
            <div class="col col-md-12">
              <table class="table table-hover mt-3">
                <thead>
                  <tr>
                    <th>Product photo</th>
                    <th>Title</th>
                    <th>Body</th>
                    <th>Upvotes</th>
                    <th>Downvotes <small>(not publicly shown)</small></th>
                    <!-- <th>Ipfs hash</th> -->

                    <th></th>
                  </tr>
                </thead>
                <tbody>

                <template x-for="review in reviews">
                  <tr>
                    <td x-text="review.product_id"></td>
                    <td x-text="review.title"></td>
                    <td x-text="review.body"></td>
                    <td x-text="review.upvotes"></td>
                    <td x-text="review.downvotes"></td>
                  </tr>
                </template>
                </tbody>
              </table>
            </div>
          <% else %>
            <div class="col col-md-12">
              <p class="h3">You need to be logged in to see your reviews</p>
            </div>
          <% end %>
        </div>

      </div>

      <div class="tab-pane fade" id="profile" role="tabpanel" aria-labelledby="profile-tab">

        <p> Explore reviews </p>

      </div>
    <% else %>
      <div class="tab-pane fade show active" id="profile" role="tabpanel" aria-labelledby="profile-tab">

        <p> Explore reviews </p>

      </div>
    <% end %>

  </div>

</div>


<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('reviewData', () => ({
            reviews: [ ],

            async refresh() {
              if (!window.contract) {
                await ethEnabled();
              }

              console.log(res);

              const reviewHashes = await contract.methods.getReviews().send();
              //console.log(reviewHashes)

              this.reviews = [];

              for (i = 0; i < reviewHashes.length; i++) {

                //console.log(reviewHashes[i])
                const asciiAddress = web3.utils.hexToAscii(reviewHashes[i])
                //console.log(asciiAddress)
                const stream = await ipfs.cat(asciiAddress);

                const decoder = new TextDecoder()
                let data = ''

                for await (const chunk of stream) {
                  // chunks of data are returned as a Uint8Array, convert it back to a string
                  data += decoder.decode(chunk, { stream: true })
                }

                const json_data = JSON.parse(data);

                this.reviews.push({
                  product_id: json_data.productNumber,
                  title: json_data.reviewTitle,
                  body: json_data.reviewBody,
                  upvotes: 1,
                  downvotes: 0,
                });
              }
            }
        }))
    })
</script>

<script>
  window.addEventListener('load', function(){
    document.getElementById("refreshReviews").click();
  });
</script>
